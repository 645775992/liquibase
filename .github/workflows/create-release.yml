name: Attach Artifacts To Draft Release
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version (example: 4.8.2)'
        required: true
      branch:
        description: 'Branch to release (Defaults to master)'
        required: false

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
    outputs:
      version: ${{ steps.collect-data.outputs.version }}
      branch: ${{ steps.collect-data.outputs.branch }}
    steps:
      - name: Collect Data
        id: collect-data
        uses: actions/github-script@v6
        with:
          script: |
            core.setOutput("version", context.payload.inputs.version);
            core.setOutput("branch", context.payload.inputs.branch || "master");

      - run: |
          echo "Creating version ${{ steps.collect-data.outputs.version }} from ${{ steps.collect-data.outputs.branch }}"

  reversion:
    needs: [ setup ]
    name: Re-version artifacts ${{ needs.setup.outputs.version }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/checkout@v3
        name: Checkout liquibase-pro
        with:
          repository: liquibase/liquibase-pro
          ref: "${{ needs.setup.outputs.branch }}"
          path: download/repo/liquibase-pro
          token: ${{ secrets.BOT_TOKEN }}

      - name: Download liquibase-core artifacts
        uses: liquibase/action-download-artifact@v2-liquibase
        with:
          workflow: build.yml
          workflow_conclusion: success
          branch: ${{ needs.setup.outputs.branch }}
          name: liquibase-core-artifacts
          path: download/liquibase-core

      - name: Download liquibase-commercial artifacts
        uses: liquibase/action-download-artifact@v2-liquibase
        with:
          github_token: ${{ secrets.BOT_TOKEN }}
          workflow: build.yml
          workflow_conclusion: success
          branch: ${{ needs.setup.outputs.branch }}
          name: liquibase-commercial-artifacts
          path: download/liquibase-commercial
          repo: liquibase/liquibase-pro

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'
          gpg-private-key: ${{ secrets.GPG_SECRET }}
          gpg-passphrase: GPG_PASSPHRASE
        env:
          GPG_PASSWORD: ${{ secrets.GPG_PASSPHRASE }}

      - name: Re-version LB Core Artifacts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GPG_PASSWORD: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          .github/util/sign-artifacts.sh re-version/final
          (cd download/liquibase-core && zip liquibase-additional-${{ needs.setup.outputs.version }}.zip *)
          mvn -B liquibase-sdk:create-release-artifacts -Dliquibase.sdk.repo=${{ github.repository }} -Dliquibase.sdk.inputDirectory=download/liquibase-core -Dliquibase.sdk.outputDirectory=re-version/final -Dliquibase.sdk.newVersion=${{ needs.setup.outputs.version }} -Dliquibase.sdk.gpgExecutable=/usr/bin/gpg -X

      - name: Cache Completed Core Artifacts
        uses: actions/cache@v3.0.8
        with:
          key: completed-artifacts-${{ github.run_number }}-${{ github.run_attempt }}
          path: re-version/final


      - name: Re-version LB Commercial Artifacts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GPG_PASSWORD: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          .github/util/sign-artifacts.sh re-version/final-commercial
          # (cd download/liquibase-commercial && zip liquibase-additional-${{ needs.setup.outputs.version }}.zip *)
          mvn -B liquibase-sdk:create-release-artifacts -Dliquibase.sdk.repo=${{ github.repository }} -Dliquibase.sdk.inputDirectory=download/liquibase-artifacts -Dliquibase.sdk.outputDirectory=re-version/final-commercial -Dliquibase.sdk.newVersion=${{ needs.setup.outputs.version }} -Dliquibase.sdk.gpgExecutable=/usr/bin/gpg -X

      - name: Cache Completed Commercial Artifacts
        uses: actions/cache@v3.0.8
        with:
          key: completed-artifacts-${{ github.run_number }}-${{ github.run_attempt }}
          path: re-version/final-commercial

      - name: Set repository tags
        run: |
          git tag -f v${{ needs.setup.outputs.version }}
          git push -f origin v${{ needs.setup.outputs.version }}

          (cd download/repo/liquibase-pro && git tag -f v${{ needs.setup.outputs.version }})
          (cd download/repo/liquibase-pro && git push -f origin v${{ needs.setup.outputs.version }})

  build-installers:
    permissions:
      contents: write  # for softprops/action-gh-release to create GitHub release
    needs: [ setup, reversion ]
    name: Build Installers
    runs-on: macos-latest #needs macos for apple notarization
    steps:
      - uses: actions/checkout@v3

      - name: Restore Completed Core Artifacts
        uses: actions/cache@v3.0.8
        with:
          key: completed-artifacts-${{ github.run_number }}-${{ github.run_attempt }}
          path: re-version/final

      - name: Set up JDK for GPG
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'
          gpg-private-key: ${{ secrets.GPG_SECRET }}
          gpg-passphrase: GPG_PASSPHRASE
        env:
          GPG_PASSWORD: ${{ secrets.GPG_PASSPHRASE }}


      - name: Re-version Installers
        env:
          INSTALL4J_LICENSE: ${{ secrets.INSTALL4J_LICENSE }}
          INSTALL4J_APPLE_KEY: ${{ secrets.INSTALL4J_APPLE_KEY }}
          INSTALL4J_APPLE_KEY_PASSWORD: ${{ secrets.INSTALL4J_APPLE_KEY_PASSWORD }}
          INSTALL4J_APPLE_ID: ${{ secrets.INSTALL4J_APPLE_ID }}
          INSTALL4J_APPLE_ID_PASSWORD: ${{ secrets.INSTALL4J_APPLE_ID_PASSWORD }}
          INSTALL4J_WINDOWS_KEY: ${{ secrets.INSTALL4J_WINDOWS_KEY }}
          INSTALL4J_WINDOWS_KEY_PASSWORD: ${{ secrets.INSTALL4J_WINDOWS_KEY_PASSWORD }}
          GPG_PASSWORD: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          mkdir -p liquibase-dist/target/keys
          echo "Saving apple key"
          echo "$INSTALL4J_APPLE_KEY" | base64 -d > liquibase-dist/target/keys/datical_apple.p12

          echo "Saving windows key"
          echo "$INSTALL4J_WINDOWS_KEY" | base64 -d > liquibase-dist/target/keys/datical_windows.pfx

          version="${{ needs.setup.outputs.version }}"
          
          ##### Rebuild installers
          tarFile=$(pwd)/re-version/final/liquibase-$version.tar.gz
          scriptDir=$(pwd)/.github/util/
          
          mkdir -p liquibase-dist/target/liquibase-$version
          (cd liquibase-dist/target/liquibase-$version && tar xfz $tarFile)
          (cd liquibase-dist && $scriptDir/package-install4j.sh $version)
          mv liquibase-dist/target/liquibase-*-installer-* re-version/final
          
          ##Sign Files
          .github/util/sign-artifacts.sh re-version/final
          
          (cd re-version/final && zip liquibase-additional-$version.zip *.asc *.md5 *.sha1)
          rm re-version/final/*.asc
          rm re-version/final/*.md5
          rm re-version/final/*.sha1

      - name: Attach Files to Draft Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.setup.outputs.version }}
          draft: true
          fail_on_unmatched_files: true
          body: Liquibase ${{ needs.setup.outputs.version }}
          generate_release_notes: true
          files: re-version/final/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
